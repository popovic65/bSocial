version: "3.9"

services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    env_file:
      - ./api-gateway/.env
    ports:
      - "3000:3000"
    depends_on:
      user:
        condition: service_started
    restart: always

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"

  postgres:
    image: postgres
    restart: always
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "6500:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data

  user:
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
    build:
      context: ./user
      dockerfile: Dockerfile
    container_name: user
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    env_file:
      - ./user/.env

  post:
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
    build:
      context: ./post
      dockerfile: Dockerfile
    container_name: post
    ports:
      - "8001:8001"
    volumes:
      - .:/app
    env_file:
      - ./post/.env

  comment:
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
    build:
      context: ./comment
      dockerfile: Dockerfile
    container_name: comment
    ports:
      - "8002:8002"
    volumes:
      - .:/app
    env_file:
      - ./.env

  notification:
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
    build:
      context: ./notification
      dockerfile: Dockerfile
    container_name: notification
    ports:
      - "8003:8003"
    volumes:
      - .:/app
    env_file:
      - ./notification/.env

  consumer:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: consumer
    env_file:
      - ./consumer/.env
    ports:
      - "8005:8005"
    volumes:
      - .:/app
    environment:
      - KAFKA_BROKER=kafka:9093
      - ELASTICSEARCH_HOST=elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_started
      kafka:
        condition: service_started

volumes:
  postgres-data:
